// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String   @id @default(uuid())
    name     String
    username String   @unique
    password String
    ROLE     UserRole @default(USER)

    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    usageRecords UsageRecord[]
}

enum UserRole {
    USER
    ADMIN
}

model Income {
    id            String      @id @default(uuid())
    date          DateTime    @default(now())
    amount        Int
    description   String
    transactionId String      @unique
    transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Expense {
    id            String      @id @default(uuid())
    date          DateTime    @default(now())
    total         Int
    notaFilePath  String?
    items         Item[]
    transactionId String      @unique
    transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Item {
    id          String  @id @default(uuid())
    description String
    armada      String?
    quantity    Int
    total       Int
    expense     Expense @relation(fields: [expenseId], references: [id])
    expenseId   String
}

model Transaction {
    id          String   @id @default(uuid())
    date        DateTime @default(now())
    description String
    debit       Int      @default(0)
    credit      Int      @default(0)
    balance     Int
    income      Income?
    expense     Expense?
}

model Car {
    id           String        @id @default(uuid()) // ID unik
    name         String // Nama mobil (misal: Innova, Avanza)
    licensePlate String?       @unique // Nomor plat mobil
    status       CarStatus     @default(AVAILABLE) // Status mobil (tersedia, digunakan)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    usageRecords UsageRecord[]
}

// model Driver {
//     id           String        @id @default(uuid())
//     name         String // Nama driver
//     phone        String        @unique // Nomor telepon driver
//     createdAt    DateTime      @default(now())
//     updatedAt    DateTime      @updatedAt
//     usageRecords UsageRecord[]
// }

model UsageRecord {
    id          String      @id @default(uuid())
    carId       String
    // driverId    String
    purpose     String
    destination String
    startTime   DateTime    @default(now())
    endTime     DateTime?
    status      UsageStatus @default(ONGOING)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    car    Car     @relation(fields: [carId], references: [id])
    // driver Driver @relation(fields: [driverId], references: [id])
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

enum CarStatus {
    AVAILABLE
    IN_USE
}

// ENUM untuk status pemakaian
enum UsageStatus {
    ONGOING
    COMPLETED
}
